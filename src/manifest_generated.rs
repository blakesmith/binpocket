// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod manifest_fbs {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum RepositoryTagsOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct RepositoryTags<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RepositoryTags<'a> {
    type Inner = RepositoryTags<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> RepositoryTags<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RepositoryTags {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RepositoryTagsArgs<'args>) -> flatbuffers::WIPOffset<RepositoryTags<'bldr>> {
      let mut builder = RepositoryTagsBuilder::new(_fbb);
      if let Some(x) = args.tag_references { builder.add_tag_references(x); }
      if let Some(x) = args.repository { builder.add_repository(x); }
      builder.finish()
    }

    pub const VT_REPOSITORY: flatbuffers::VOffsetT = 4;
    pub const VT_TAG_REFERENCES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn repository(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RepositoryTags::VT_REPOSITORY, None).unwrap()
  }
  #[inline]
  pub fn tag_references(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TagReference<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<TagReference<'a>>>>>(RepositoryTags::VT_TAG_REFERENCES, None)
  }
}

pub struct RepositoryTagsArgs<'a> {
    pub repository: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub tag_references: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<TagReference<'a >>>>>,
}
impl<'a> Default for RepositoryTagsArgs<'a> {
    #[inline]
    fn default() -> Self {
        RepositoryTagsArgs {
            repository: None, // required field
            tag_references: None,
        }
    }
}
pub struct RepositoryTagsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RepositoryTagsBuilder<'a, 'b> {
  #[inline]
  pub fn add_repository(&mut self, repository: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RepositoryTags::VT_REPOSITORY, repository);
  }
  #[inline]
  pub fn add_tag_references(&mut self, tag_references: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TagReference<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RepositoryTags::VT_TAG_REFERENCES, tag_references);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RepositoryTagsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RepositoryTagsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RepositoryTags<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, RepositoryTags::VT_REPOSITORY,"repository");
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum TagReferenceOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct TagReference<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TagReference<'a> {
    type Inner = TagReference<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> TagReference<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        TagReference {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args TagReferenceArgs<'args>) -> flatbuffers::WIPOffset<TagReference<'bldr>> {
      let mut builder = TagReferenceBuilder::new(_fbb);
      if let Some(x) = args.manifest_digest { builder.add_manifest_digest(x); }
      if let Some(x) = args.tag_name { builder.add_tag_name(x); }
      builder.finish()
    }

    pub const VT_TAG_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_MANIFEST_DIGEST: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn tag_name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TagReference::VT_TAG_NAME, None).unwrap()
  }
  #[inline]
  pub fn manifest_digest(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TagReference::VT_MANIFEST_DIGEST, None).unwrap()
  }
}

pub struct TagReferenceArgs<'a> {
    pub tag_name: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub manifest_digest: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for TagReferenceArgs<'a> {
    #[inline]
    fn default() -> Self {
        TagReferenceArgs {
            tag_name: None, // required field
            manifest_digest: None, // required field
        }
    }
}
pub struct TagReferenceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TagReferenceBuilder<'a, 'b> {
  #[inline]
  pub fn add_tag_name(&mut self, tag_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TagReference::VT_TAG_NAME, tag_name);
  }
  #[inline]
  pub fn add_manifest_digest(&mut self, manifest_digest: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TagReference::VT_MANIFEST_DIGEST, manifest_digest);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TagReferenceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TagReferenceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TagReference<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TagReference::VT_TAG_NAME,"tag_name");
    self.fbb_.required(o, TagReference::VT_MANIFEST_DIGEST,"manifest_digest");
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod manifest_fbs

